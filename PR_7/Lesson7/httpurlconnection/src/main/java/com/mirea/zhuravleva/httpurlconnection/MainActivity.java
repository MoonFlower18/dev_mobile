package com.mirea.zhuravleva.httpurlconnection;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import com.mirea.zhuravleva.httpurlconnection.databinding.ActivityMainBinding;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {
    private ActivityMainBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        binding.button.setOnClickListener(view -> {
            if (isNetworkAvailable()) {
                new DownloadGeoPoint().execute("https://ipinfo.io/json");
            } else {
                Toast.makeText(this, "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!", Toast.LENGTH_LONG).show();
            }
        });

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });
    }

    private boolean isNetworkAvailable() {
        ConnectivityManager connectivityManager =
                (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connectivityManager != null ?
                connectivityManager.getActiveNetworkInfo() : null;
        return networkInfo != null && networkInfo.isConnected();
    }

    private class DownloadGeoPoint extends AsyncTask<String, Void, String> {
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            binding.progressBar.setVisibility(View.VISIBLE);
            binding.button.setEnabled(false);
        }

        @Override
        protected String doInBackground(String... urls) {
            try {
                return downloadUrl(urls[0]);
            } catch (IOException e) {
                return "–û—à–∏–±–∫–∞: " + e.getMessage();
            }
        }

        @Override
        protected void onPostExecute(String result) {
            try {
                JSONObject json = new JSONObject(result);

                binding.ipView.setText(json.optString("ip", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
                binding.cityView.setText(json.optString("city", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
                binding.regionView.setText(json.optString("region", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));
                binding.countryView.setText(json.optString("country", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"));

                String[] coords = json.optString("loc", "0,0").split(",");
                if (coords.length == 2) {
                    new DownloadWeatherTask().execute(
                            "https://api.open-meteo.com/v1/forecast?" +
                                    "latitude=" + coords[0] +
                                    "&longitude=" + coords[1] +
                                    "&current_weather=true");
                }
            } catch (JSONException e) {
                binding.weatherView.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ\n\uD83D\uDE1F");
            } finally {
                binding.progressBar.setVisibility(View.GONE);
                binding.button.setEnabled(true);
            }
        }
    }

    private class DownloadWeatherTask extends AsyncTask<String, Void, String> {
        @Override
        protected String doInBackground(String... urls) {
            try {
                return downloadUrl(urls[0]);
            } catch (IOException e) {
                return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: " + e.getMessage();
            }
        }

        @Override
        protected void onPostExecute(String result) {
            try {
                JSONObject json = new JSONObject(result);
                JSONObject currentWeather = json.getJSONObject("current_weather");

                double temperature = currentWeather.getDouble("temperature");
                double windspeed = currentWeather.getDouble("windspeed");
                int weathercode = currentWeather.getInt("weathercode");
                double winddirection = currentWeather.getDouble("winddirection");
                String weatherDescription = getWeatherDescription(weathercode);
                String windDirection = getWindDirection(winddirection);

                String weatherText = String.format(Locale.getDefault(),
                        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: %.1f –∫–º/—á (%s)\n–ü–æ–≥–æ–¥–∞: %s",
                        temperature, windspeed, windDirection, weatherDescription);

                binding.weatherView.setText(weatherText);
            } catch (JSONException e) {
                binding.weatherView.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ\n\uD83D\uDE1F");
            }
        }
    }

    private String getWeatherDescription(int code) {
        switch (code) {
            case 0: return "–Ø—Å–Ω–æ ‚òÄÔ∏è";
            case 1: return "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ üå§";
            case 2: return "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ";
            case 3: return "–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è";
            case 45: return "–¢—É–º–∞–Ω üå´";
            case 48: return "–¢—É–º–∞–Ω —Å –∏–Ω–µ–µ–º üå´";
            case 51: return "–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å üåß";
            case 53: return "–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å üåß";
            case 55: return "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å üåß";
            case 56: return "–õ—ë–≥–∫–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å üåß‚ùÑÔ∏è";
            case 57: return "–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å üåß‚ùÑÔ∏è";
            case 61: return "–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å üå¶";
            case 63: return "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß";
            case 65: return "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßüí¶";
            case 66: return "–õ—ë–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å üåß‚ùÑÔ∏è";
            case 67: return "–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å üåß‚ùÑÔ∏è";
            case 71: return "–õ—ë–≥–∫–∏–π —Å–Ω–µ–≥ ‚ùÑÔ∏è";
            case 73: return "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏èüå®";
            case 75: return "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏èüå®";
            case 77: return "–°–Ω–µ–∂–Ω—ã–µ –∑—ë—Ä–Ω–∞ ‚ùÑÔ∏è";
            case 80: return "–õ—ë–≥–∫–∏–µ –ª–∏–≤–Ω–∏ üå¶";
            case 81: return "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏–≤–Ω–∏ üåß";
            case 82: return "–°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏ üåßüí¶";
            case 85: return "–õ—ë–≥–∫–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥ ‚ùÑÔ∏è";
            case 86: return "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥ ‚ùÑÔ∏èüå®";
            case 95: return "–ì—Ä–æ–∑–∞ ‚ö°";
            case 96: return "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚ö°üå®";
            case 99: return "–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚ö°üå®üí•";
            default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (" + code + ")";
        }
    }
    private String getWindDirection(double degrees) {
        if (degrees >= 337.5 || degrees < 22.5) return "–°–µ–≤–µ—Ä–Ω—ã–π";
        if (degrees >= 22.5 && degrees < 67.5) return "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π";
        if (degrees >= 67.5 && degrees < 112.5) return "–í–æ—Å—Ç–æ—á–Ω—ã–π";
        if (degrees >= 112.5 && degrees < 157.5) return "–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π";
        if (degrees >= 157.5 && degrees < 202.5) return "–Æ–∂–Ω—ã–π";
        if (degrees >= 202.5 && degrees < 247.5) return "–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π";
        if (degrees >= 247.5 && degrees < 292.5) return "–ó–∞–ø–∞–¥–Ω—ã–π";
        if (degrees >= 292.5 && degrees < 337.5) return "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π";
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ";
    }

    private String downloadUrl(String urlString) throws IOException {
        InputStream inputStream = null;
        try {
            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setReadTimeout(10000);
            connection.setConnectTimeout(15000);
            connection.setRequestMethod("GET");
            connection.connect();

            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                inputStream = connection.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                StringBuilder stringBuilder = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    stringBuilder.append(line);
                }
                return stringBuilder.toString();
            } else {
                throw new IOException("–û—à–∏–±–∫–∞ HTTP: " + connection.getResponseCode());
            }
        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
        }
    }
}